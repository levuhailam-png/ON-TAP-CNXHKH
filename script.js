
// --- L·∫§Y C√ÅC TH√ÄNH PH·∫¶N HTML ---
const menuContainer = document.getElementById('menu-container');
const quizContainer = document.getElementById('quiz-container');
const resultContainer = document.getElementById('result-container');
const previewContainer = document.getElementById('preview-container');
const deckSelectContainer = document.getElementById('deck-select-container'); 
const modeSelectContainer = document.getElementById('mode-select-container'); // M·ªõi

const startSetMenuBtn = document.getElementById('start-set-menu-btn'); 
const startRandomBtn = document.getElementById('start-random-btn');
const previewMenuBtn = document.getElementById('preview-menu-btn'); 

const deckSelectTitle = document.getElementById('deck-select-title');
const deckListButtons = document.getElementById('deck-list-buttons');
const backToMenuDeckSelect = document.getElementById('back-to-menu-deck-select');

// N√∫t ch·ªçn ch·∫ø ƒë·ªô m·ªõi
const modeSelectTitle = document.getElementById('mode-select-title');
const startSequentialBtn = document.getElementById('start-sequential-btn');
const startDeckRandomBtn = document.getElementById('start-deck-random-btn');
const backToDeckSelectBtn = document.getElementById('back-to-deck-select');

const questionCounter = document.getElementById('question-counter');
const questionText = document.getElementById('question-text');
const optionsContainer = document.getElementById('options-container');
const feedbackText = document.getElementById('feedback-text');
const nextBtn = document.getElementById('next-btn');

const scoreText = document.getElementById('score-text');

const previewDeckTitle = document.getElementById('preview-deck-title');
const previewContent = document.getElementById('preview-content');

const backToMenuQuiz = document.getElementById('back-to-menu-quiz');
const backToMenuResult = document.getElementById('back-to-menu-result');
const backToMenuPreview = document.getElementById('back-to-menu-preview');

const bgMusic = document.getElementById('bg-music');
const musicToggleBtn = document.getElementById('music-toggle-btn');
const musicSelect = document.getElementById('music-select'); 

// --- BI·∫æN TR·∫†NG TH√ÅI TR√í CH∆†I ---
let currentQuestions = [];
let currentQuestionIndex = 0;
let score = 0;
let wrongAnswers = 0;
let currentAction = ''; 
let selectedDeckData = null; // L∆∞u tr·ªØ d·ªØ li·ªáu c·ªßa ƒë·ªÅ ƒëang ƒë∆∞·ª£c ch·ªçn

// --- C√ÅC H√ÄM X·ª¨ L√ù CH√çNH ---

function showScreen(screen) {
    menuContainer.classList.remove('active');
    quizContainer.classList.remove('active');
    resultContainer.classList.remove('active');
    previewContainer.classList.remove('active');
    deckSelectContainer.classList.remove('active');
    modeSelectContainer.classList.remove('active'); // Th√™m
    screen.classList.add('active');
}

// Ch·ª©c nƒÉng: T·ª´ Menu -> M√†n h√¨nh Ch·ªçn ƒê·ªÅ
function showDeckSelection(action) {
    currentAction = action; 
    deckListButtons.innerHTML = '';
    
    deckSelectTitle.textContent = (action === 'start') ? 'Ch·ªçn ƒë·ªÅ ƒë·ªÉ √¥n t·∫≠p' : 'Ch·ªçn ƒë·ªÅ ƒë·ªÉ xem tr∆∞·ªõc';
    
    for (const deckKey in allDecks) {
        const deck = allDecks[deckKey];
        const button = document.createElement('button');
        button.textContent = deck.name; 
        button.classList.add('btn');
        
        button.addEventListener('click', () => {
            if (currentAction === 'start') {
                // N·∫øu ch·ªçn ch∆°i, chuy·ªÉn sang m√†n h√¨nh ch·ªçn ch·∫ø ƒë·ªô
                selectedDeckData = deck;
                showModeSelection(deck);
            } else if (currentAction === 'preview') {
                // N·∫øu ch·ªçn xem tr∆∞·ªõc, hi·ªÉn th·ªã ƒë·ªÅ ngay
                showPreview(deck.data, deck.name);
            }
        });
        deckListButtons.appendChild(button);
    }
    
    showScreen(deckSelectContainer);
}

// (H√†m m·ªõi) Ch·ª©c nƒÉng: T·ª´ Ch·ªçn ƒê·ªÅ -> M√†n h√¨nh Ch·ªçn Ch·∫ø ƒë·ªô
function showModeSelection(deck) {
    modeSelectTitle.textContent = `Ch·ªçn Ch·∫ø ƒë·ªô cho ${deck.name}`;
    
    // G·∫Øn s·ª± ki·ªán cho c√°c n√∫t ch·∫ø ƒë·ªô ch∆°i
    startSequentialBtn.onclick = () => startQuiz('sequential', deck.data);
    startDeckRandomBtn.onclick = () => startQuiz('deck_random', deck.data);
    
    showScreen(modeSelectContainer);
}


// B·∫Øt ƒë·∫ßu Quiz (ƒë√£ c·∫≠p nh·∫≠t ƒë·ªÉ x·ª≠ l√Ω 3 ch·∫ø ƒë·ªô)
function startQuiz(mode, deckData = null) {
    currentQuestionIndex = 0;
    score = 0;
    wrongAnswers = 0;
    
    if (mode === 'sequential') {
        currentQuestions = [...deckData]; // Ch∆°i theo th·ª© t·ª± (sequential)
    } else if (mode === 'deck_random') {
        currentQuestions = [...deckData].sort(() => Math.random() - 0.5); // Random trong ƒë·ªÅ
    } else if (mode === 'random') {
        currentQuestions = [...allQuestions].sort(() => Math.random() - 0.5); // Random t·∫•t c·∫£
    } else {
        console.error('L·ªói: Ch·∫ø ƒë·ªô kh√¥ng h·ª£p l·ªá ho·∫∑c thi·∫øu d·ªØ li·ªáu ƒë·ªÅ');
        return;
    }
    
    showScreen(quizContainer);
    showQuestion();
}


// (C√°c h√†m c√≤n l·∫°i gi·ªØ nguy√™n logic v√† ƒë√£ s·ª≠a l·ªói ƒë√°p √°n t·ªïng h·ª£p)
function showQuestion() {
    feedbackText.style.display = 'none';
    nextBtn.style.display = 'none';
    optionsContainer.innerHTML = '';
    
    if (currentQuestionIndex < currentQuestions.length) {
        const q = currentQuestions[currentQuestionIndex];
        questionCounter.textContent = `C√¢u ${currentQuestionIndex + 1}/${currentQuestions.length}`;
        questionText.textContent = q.cau;
        
        q.options.forEach(option => {
            const button = document.createElement('button');
            button.textContent = option;
            button.classList.add('btn');
            const answerLetter = option.split('.')[0].trim();
            button.dataset.answer = answerLetter;
            button.addEventListener('click', () => selectAnswer(button, answerLetter, q.dap_an, q.giai_thich));
            optionsContainer.appendChild(button);
        });
    } else {
        showResult();
    }
}

function selectAnswer(selectedButton, selectedAnswer, correctAnswer, explanation) {
    Array.from(optionsContainer.children).forEach(btn => {
        btn.disabled = true;
        if (btn.dataset.answer === correctAnswer) {
            btn.classList.add('correct');
        }
    });
    
    if (selectedAnswer === correctAnswer) {
        score++;
    } else {
        wrongAnswers++;
        selectedButton.classList.add('incorrect');
    }
    
    feedbackText.innerHTML = `<b>ƒê√°p √°n ƒë√∫ng: ${correctAnswer}</b><br>${explanation || 'Kh√¥ng c√≥ gi·∫£i th√≠ch.'}`;
    feedbackText.style.display = 'block';
    nextBtn.style.display = 'block';
}

function showResult() {
    scoreText.textContent = `ƒê√∫ng: ${score} / Sai: ${wrongAnswers} (T·ªïng: ${currentQuestions.length})`;
    showScreen(resultContainer);
}

function showPreview(deckData, deckName) {
    previewContent.innerHTML = ''; 
    
    if (!deckData) {
         console.error('L·ªói: Kh√¥ng c√≥ d·ªØ li·ªáu ƒë·ªÅ ƒë·ªÉ xem');
         return;
    }
    
    previewDeckTitle.textContent = `Xem tr∆∞·ªõc ${deckName}`;
    
    deckData.forEach((q) => {
        const item = document.createElement('div');
        item.classList.add('preview-item');
        
        const correctLetter = q.dap_an;
        let dapAnHienThi = '';
        
        const correctOptionText = q.options.find(option => option.split('.')[0].trim() === correctLetter);
        
        const isCombinedAnswer = correctOptionText && (
            correctOptionText.toLowerCase().includes('c·∫£') || 
            correctOptionText.toLowerCase().includes('t·∫•t c·∫£') ||
            correctOptionText.toLowerCase().includes('ƒë·ªÅu')
        );

        if (isCombinedAnswer) {
            dapAnHienThi += `<p style="font-weight: bold; color: #28a745;">${correctOptionText}</p>`;
            dapAnHienThi += `<u>Bao g·ªìm n·ªôi dung:</u><ul style="margin-top: 5px; padding-left: 20px;">`;
            
            q.options.forEach(optionText => {
                const letter = optionText.split('.')[0].trim();
                
                if (['A', 'B', 'C', 'D'].includes(letter)) {
                    const content = optionText.substring(optionText.indexOf('.') + 1).trim();
                    if (letter !== correctLetter) {
                        dapAnHienThi += `<li><b>${letter}:</b> ${content}</li>`;
                    }
                }
            });
            dapAnHienThi += `</ul>`;
            
        } else {
            const correctOptionText = q.options.find(option => option.split('.')[0].trim() === correctLetter);
            dapAnHienThi = correctOptionText ? `<p style="font-weight: bold; color: #28a745;">${correctOptionText}</p>` : `ƒê√°p √°n: ${correctLetter} (Kh√¥ng t√¨m th·∫•y n·ªôi dung ƒë·∫ßy ƒë·ªß)`;
        }
        
        item.innerHTML = `
            <div class="preview-q">${q.cau}</div>
            <div class="preview-a">${dapAnHienThi}</div> 
            <div class="preview-e">Gi·∫£i th√≠ch: ${q.giai_thich || 'Kh√¥ng c√≥ gi·∫£i th√≠ch.'}</div>
        `;
        
        previewContent.appendChild(item);
    });
    showScreen(previewContainer);
}


// --- H√ÄM X·ª¨ L√ù NH·∫†C N·ªÄN ---
function updateMusicPlayer() {
    const selectedFile = musicSelect.value;
    if (selectedFile === "none") {
        bgMusic.pause();
        bgMusic.removeAttribute('src');
        musicToggleBtn.textContent = 'B·∫≠t Nh·∫°c üéµ';
        musicToggleBtn.disabled = true;
        return;
    }
    musicToggleBtn.disabled = false;
    if (!bgMusic.src || !bgMusic.src.endsWith(selectedFile)) {
        bgMusic.src = selectedFile;
        bgMusic.load(); 
        const playPromise = bgMusic.play();
        if (playPromise !== undefined) {
            playPromise.then(() => {
                musicToggleBtn.textContent = 'T·∫Øt Nh·∫°c ‚è∏Ô∏è';
            }).catch(error => {
                console.log("T·ª± ƒë·ªông ph√°t b·ªã ch·∫∑n.", error);
                musicToggleBtn.textContent = 'B·∫≠t Nh·∫°c üéµ'; 
            });
        }
    } else {
         musicToggleBtn.textContent = bgMusic.paused ? 'B·∫≠t Nh·∫°c üéµ' : 'T·∫Øt Nh·∫°c ‚è∏Ô∏è';
    }
}

function toggleMusic() {
    if (musicSelect.value === "none") return; 
    if (bgMusic.paused) {
        bgMusic.play().catch(e => console.log("Kh√¥ng th·ªÉ ph√°t nh·∫°c: ", e));
        musicToggleBtn.textContent = 'T·∫Øt Nh·∫°c ‚è∏Ô∏è';
    } else {
        bgMusic.pause();
        musicToggleBtn.textContent = 'B·∫≠t Nh·∫°c üéµ';
    }
}


// --- G·∫ÆN S·ª∞ KI·ªÜN ---

window.addEventListener('load', () => {
    // Kh·ªüi t·∫°o nh·∫°c m·∫∑c ƒë·ªãnh
    bgMusic.src = musicSelect.value;
    bgMusic.load();
    const playPromise = bgMusic.play();
    
    if (playPromise !== undefined) {
        playPromise.then(() => {
            musicToggleBtn.textContent = 'T·∫Øt Nh·∫°c ‚è∏Ô∏è';
            musicToggleBtn.disabled = false;
        }).catch(error => {
            musicToggleBtn.textContent = 'B·∫≠t Nh·∫°c üéµ';
            musicToggleBtn.disabled = false;
        });
    }

    // G·∫Øn s·ª± ki·ªán cho c√°c ƒëi·ªÅu khi·ªÉn
    musicSelect.addEventListener('change', updateMusicPlayer);
    musicToggleBtn.addEventListener('click', toggleMusic);
    
    if (musicSelect.value === 'none') {
        musicToggleBtn.disabled = true;
    }

    // G·∫Øn s·ª± ki·ªán cho c√°c n√∫t menu ch√≠nh
    startSetMenuBtn.addEventListener('click', () => showDeckSelection('start'));
    startRandomBtn.addEventListener('click', () => startQuiz('random')); 
    previewMenuBtn.addEventListener('click', () => showDeckSelection('preview'));

    // G·∫Øn s·ª± ki·ªán quay l·∫°i
    backToMenuDeckSelect.addEventListener('click', () => showScreen(menuContainer));
    backToMenuQuiz.addEventListener('click', () => showScreen(menuContainer));
    backToMenuResult.addEventListener('click', () => showScreen(menuContainer));
    backToMenuPreview.addEventListener('click', () => showScreen(menuContainer));
    
    // G·∫Øn s·ª± ki·ªán cho n√∫t Quay l·∫°i ch·ªçn ƒë·ªÅ tr√™n m√†n h√¨nh ch·ªçn ch·∫ø ƒë·ªô
    backToDeckSelectBtn.addEventListener('click', () => showScreen(deckSelectContainer));
    
    // N√∫t ti·∫øp theo (Quiz)
    nextBtn.addEventListener('click', () => {
        currentQuestionIndex++;
        showQuestion();
    });
});